// CppStudy2.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
	//변수
	//변하는 수

	//정수형 변수
	//변수타입				크기				범위
	//int					4Byte			-22억 ~ 21억 까지의 수를 담는다
	//unsigned int			4Byte			0 ~ 43억까지의 수를 담는다
	//long					4Byte			-22억 ~ 21억 까지의 수를 담는다
	//unsigned long			4Byte			0 ~ 43억까지의 수를 담는다
	//short					2Byte			-32768 ~ 32767까지의 수를 담는다
	//unsigned short		2Byte			0 ~ 65535까지의 수를 담는다

	//실수형 변수
	//float					4Byte			소수점 6짜리까지의 수를 담는다.
	//double				8Byte			소수점 15짜리까지의 수를 담는다.

	//문자형 변수
	//char					1Byte			정수를 담는다.
	//unsigned char			1Byte			양의 정수를 담는다.

	//참, 거짓 변수
	//bool					1Byte			0이면 거짓(false), 1이면 참(true)

	//변수 선언할 시 주의할 점.
	//1. 변수명은 중복될 수 없다.
	//2. 변수명은 숫자가 처음 올 수가 없다.(뒤엔 올수 있음)
	//3. 변수가 처음 선언되면 안에 쓰레기 값이 있기때문에 초기화를 해야한다.
	//4. 당연한 말이지만 누가보더라도 알 수 있게 변수명을 짓자
	//5. C언어는 외국애가 만들었다. 유의하자

	//int OrcHP = 200;
	//int OrcMP = 30;
	//int OrcAtk = 10;
	//
	//int HumanHP = 130;
	//int HumanAtk = 7;

	//cout << "현재 오크 체력 : " << OrcHP << endl;

	//OrcHP = OrcHP - HumanAtk;

	//cout << "우서 경이 " << HumanAtk << "만큼의 데미지를 오크에게 입혀 " << OrcHP << "가 되었다" << endl;
	//	
	//cout << "현재 오크 체력 : " << OrcHP << endl;

	//변수 표기법 
	//1. 헝가리안식 표기법
	//절차지향적 코딩방식이 유행하던 시절에 나온 변수 표기규칙
	//코딩 줄 수가 상당히 길었기 때문에 변수를 선언하고 나중에
	//까먹는 경우가 빈번하여, 나온 방식이다.
	//현재는 헝가리안식 표기를 MS에서는 공식적으로 금지했다.
	//예를 들면) int -> n int num -> nNum, float speed fSpeed bool isDead -> bIsDead


	//2. 카멜식 표기법
	//객체지향적 코딩방식이 나오면서 코드 줄 수가 상대적으로 짧아졌는데
	//그렇기 때문에 깔끔하게 코드를 짜기 위해서 나온 방식
	//단어 맨 앞글자를 대문자로 표기하는 방식이여서
	//낙타 혹 같다고 카멜식 표기법이라고 한다

	//3. 파스칼 표기법
	//모든 단어의 앞글자가 대문자로 시작
	//네임스페이스, 이벤트, 프로퍼티, 클래스 네임을 지정할 때 주로 사용
	//클래스나 함수 이름에 많이 사용

	//4. 스네이크 표기법
	//모든 단어를 소문자로 표시
	//의미 있는 단어 사이사이를 언더바로 구분
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
